#!/usr/bin/env python3
"""
Export utilities for multiple output formats
Supports Markdown, HTML, PDF, and JSON exports
"""

import base64
import json
import os
import tempfile
from datetime import datetime
from typing import Any, Dict, Optional

import markdown


class DocumentExporter:
    """Handle document export in multiple formats"""

    def __init__(self):
        self.supported_formats = ["md", "html", "json", "txt"]

    def export_markdown(self, content: str, metadata: Dict[str, Any]) -> str:
        """Export as Markdown with front matter"""
        front_matter = "---\n"
        for key, value in metadata.items():
            front_matter += f"{key}: {value}\n"
        front_matter += "---\n\n"

        return front_matter + content

    def export_html(self, content: str, metadata: Dict[str, Any]) -> str:
        """Export as HTML with styling"""
        # Convert markdown to HTML
        html_content = markdown.markdown(content, extensions=["tables", "fenced_code"])

        # Create full HTML document
        html_template = f"""
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{metadata.get('project', 'Document')} - {metadata.get('modules', 'Generated')}</title>
    <style>
        body {{
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            line-height: 1.6;
            color: #333;
        }}
        
        h1, h2, h3, h4, h5, h6 {{
            color: #2c3e50;
            margin-top: 2em;
            margin-bottom: 1em;
        }}
        
        h1 {{
            border-bottom: 2px solid #3498db;
            padding-bottom: 10px;
        }}
        
        h2 {{
            border-bottom: 1px solid #bdc3c7;
            padding-bottom: 5px;
        }}
        
        table {{
            border-collapse: collapse;
            width: 100%;
            margin: 20px 0;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }}
        
        th, td {{
            border: 1px solid #ddd;
            padding: 12px;
            text-align: left;
        }}
        
        th {{
            background-color: #f8f9fa;
            font-weight: 600;
            color: #2c3e50;
        }}
        
        tr:nth-child(even) {{
            background-color: #f8f9fa;
        }}
        
        pre {{
            background: #f4f4f4;
            padding: 15px;
            border-radius: 5px;
            overflow-x: auto;
            border-left: 4px solid #3498db;
        }}
        
        code {{
            background: #f4f4f4;
            padding: 2px 6px;
            border-radius: 3px;
            font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
        }}
        
        blockquote {{
            border-left: 4px solid #3498db;
            margin: 20px 0;
            padding: 10px 20px;
            background: #f8f9fa;
            font-style: italic;
        }}
        
        .metadata {{
            background: #e8f5e8;
            padding: 15px;
            border-radius: 5px;
            margin-bottom: 30px;
            border: 1px solid #27ae60;
        }}
        
        .metadata h3 {{
            margin-top: 0;
            color: #27ae60;
        }}
        
        .quality-score {{
            background: #fff3cd;
            border: 1px solid #ffeaa7;
            padding: 10px;
            border-radius: 5px;
            margin: 20px 0;
        }}
        
        @media print {{
            body {{
                max-width: none;
                margin: 0;
                padding: 15px;
            }}
            
            .no-print {{
                display: none;
            }}
        }}
    </style>
</head>
<body>
    <div class="metadata">
        <h3>Document Information</h3>
        <p><strong>Project:</strong> {metadata.get('project', 'N/A')}</p>
        <p><strong>Generated:</strong> {metadata.get('generated', datetime.now().isoformat())}</p>
        <p><strong>Modules:</strong> {metadata.get('modules', 'N/A')}</p>
        <p><strong>Claims Scope:</strong> {metadata.get('claims_scope', 'N/A')}</p>
        {f'<div class="quality-score"><strong>Quality Score:</strong> {metadata.get("quality_score", {}).get("score", "N/A")}/100</div>' if metadata.get('quality_score') else ''}
    </div>
    
    {html_content}
    
    <footer style="margin-top: 50px; padding-top: 20px; border-top: 1px solid #ddd; text-align: center; color: #666;">
        <p>Generated by Guidance Blueprint Kit Pro</p>
    </footer>
</body>
</html>
        """

        return html_template

    def export_json(self, content: str, metadata: Dict[str, Any]) -> str:
        """Export as structured JSON"""
        export_data = {
            "metadata": metadata,
            "content": content,
            "exported_at": datetime.now().isoformat(),
            "format_version": "1.0",
        }

        return json.dumps(export_data, indent=2, ensure_ascii=False)

    def export_text(self, content: str, metadata: Dict[str, Any]) -> str:
        """Export as plain text"""
        header = f"""
{metadata.get('project', 'Document').upper()}
{'=' * len(metadata.get('project', 'Document'))}

Generated: {metadata.get('generated', datetime.now().isoformat())}
Modules: {metadata.get('modules', 'N/A')}
Claims Scope: {metadata.get('claims_scope', 'N/A')}

"""

        # Remove markdown formatting for plain text
        import re

        # Remove markdown headers
        text_content = re.sub(r"^#+\s*", "", content, flags=re.MULTILINE)

        # Remove markdown links
        text_content = re.sub(r"\[([^\]]+)\]\([^\)]+\)", r"\1", text_content)

        # Remove markdown emphasis
        text_content = re.sub(r"\*\*([^\*]+)\*\*", r"\1", text_content)
        text_content = re.sub(r"\*([^\*]+)\*", r"\1", text_content)

        # Remove markdown code blocks
        text_content = re.sub(
            r"```[^`]*```", "[CODE BLOCK]", text_content, flags=re.DOTALL
        )
        text_content = re.sub(r"`([^`]+)`", r"\1", text_content)

        return header + text_content

    def create_shareable_link(
        self, document_id: str, base_url: str = "http://localhost:8000"
    ) -> str:
        """Create a shareable link for the document"""
        return f"{base_url}/share/{document_id}"

    def generate_qr_code(self, url: str) -> Optional[str]:
        """Generate QR code for sharing (returns base64 encoded image)"""
        try:
            from io import BytesIO

            import qrcode

            qr = qrcode.QRCode(version=1, box_size=10, border=5)
            qr.add_data(url)
            qr.make(fit=True)

            img = qr.make_image(fill_color="black", back_color="white")

            buffer = BytesIO()
            img.save(buffer, format="PNG")
            buffer.seek(0)

            return base64.b64encode(buffer.getvalue()).decode()
        except ImportError:
            return None

    def create_download_package(
        self, content: str, metadata: Dict[str, Any], formats: list = None
    ) -> str:
        """Create a ZIP package with multiple formats"""
        if formats is None:
            formats = ["md", "html", "json"]

        import zipfile

        # Create temporary file for ZIP
        temp_zip = tempfile.NamedTemporaryFile(delete=False, suffix=".zip")

        with zipfile.ZipFile(temp_zip.name, "w") as zipf:
            project_name = metadata.get("project", "document").replace(" ", "_")

            for fmt in formats:
                if fmt == "md":
                    file_content = self.export_markdown(content, metadata)
                    filename = f"{project_name}.md"
                elif fmt == "html":
                    file_content = self.export_html(content, metadata)
                    filename = f"{project_name}.html"
                elif fmt == "json":
                    file_content = self.export_json(content, metadata)
                    filename = f"{project_name}.json"
                elif fmt == "txt":
                    file_content = self.export_text(content, metadata)
                    filename = f"{project_name}.txt"
                else:
                    continue

                zipf.writestr(filename, file_content.encode("utf-8"))

        return temp_zip.name


# Global instance
document_exporter = DocumentExporter()
