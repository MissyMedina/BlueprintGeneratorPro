name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r web_app/requirements.txt
        pip install -r validation_service/requirements.txt
        pip install pytest pytest-cov flake8 black isort
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics
    
    - name: Check code formatting with black
      run: |
        black --check --diff .
    
    - name: Check import sorting with isort
      run: |
        isort --check-only --diff .
    
    - name: Run tests with pytest
      run: |
        cd tests && python -m pytest test_simple.py -v --cov=../web_app --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./tests/coverage.xml
        flags: unittests
        name: codecov-umbrella

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run Bandit security scan
      run: |
        bandit -r web_app/ validation_service/ -f json -o bandit-report.json || true
    
    - name: Run Safety check
      run: |
        safety check --json --output safety-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  build-and-test-docker:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build web app Docker image
      run: |
        cd web_app
        docker build -t blueprint-pro-web:test .
    
    - name: Build validation service Docker image
      run: |
        cd validation_service
        docker build -t blueprint-pro-validation:test .
    
    - name: Test Docker containers
      run: |
        # Start containers
        docker run -d --name web-test -p 8001:8001 blueprint-pro-web:test
        docker run -d --name validation-test -p 8002:8002 blueprint-pro-validation:test
        
        # Wait for services to start
        sleep 10
        
        # Test health endpoints
        curl -f http://localhost:8001/ || exit 1
        curl -f http://localhost:8002/ || exit 1
        
        # Cleanup
        docker stop web-test validation-test
        docker rm web-test validation-test

  performance-test:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r web_app/requirements.txt
        pip install locust
    
    - name: Run performance tests
      run: |
        # Start the web app in background
        cd web_app && python main.py &
        WEB_PID=$!
        
        # Wait for service to start
        sleep 5
        
        # Run basic load test
        locust --headless --users 10 --spawn-rate 2 --run-time 30s --host http://localhost:8001 -f tests/locustfile.py || true
        
        # Cleanup
        kill $WEB_PID

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test, security-scan, build-and-test-docker]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # e.g., deploy to staging server, update staging database, etc.

  deploy-production:
    runs-on: ubuntu-latest
    needs: [test, security-scan, build-and-test-docker, performance-test]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # e.g., deploy to production server, update production database, etc.
    
    - name: Create release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          Automated release from CI/CD pipeline
          
          Changes in this release:
          ${{ github.event.head_commit.message }}
        draft: false
        prerelease: false
